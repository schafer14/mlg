{{$fn := .}}
package handler_test

import (
  "testing"
  "context"
  "{{ $fn.Module.Module.Mod }}/lambda/{{ $fn.Name }}/handler"
  "github.com/matryer/is"
  "{{ $fn.Module.Module.Mod }}/internal/tests"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
)

func TestHandleInvocation(t *testing.T) {

  // Arrange
  is := is.New(t)
  ctx := context.Background()
  h, _ := buildHandler(t)

  // Act
  err := h.HandleInvocation(ctx)

  // Assert
  is.NoErr(err)

}


// ========
// FIXTURES
// ========
func buildHandler(t *testing.T) (handler.Handler, *tests.Recorder) {

  log := zerolog.New(os.Stderr).With().Timestamp().Logger()
	table, tearDown := tests.CreateDatabase(t)
	t.Cleanup(tearDown)
	publisher := &tests.Recorder{}

	return handler.Handler{
    Log: log,
    {{ if hasDependency $fn.Dependencies "dynamo" }}
		Table:   table,
    {{ end }}
    {{ if hasDependency $fn.Dependencies "eventBridge" }}
		Bridge:  publisher,
		BusName: "the bus",
    {{ end }}
	}, publisher
}


